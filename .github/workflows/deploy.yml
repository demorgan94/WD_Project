name: Deploy Spring Boot App to EC2 via ECR 🚀

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code 📦
        uses: actions/checkout@v4

      - name: Set up Java JDK 21 with Corretto ☕
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'corretto'

      - name: Build Spring Boot JAR with Gradle 🛠️
        run: |
          cd wd-backend
          ./gradlew clean build

      - name: Build & Push Docker Image 🐳🚢
        uses: docker://ghcr.io/kciter/aws-ecr-action:latest
        with:
          access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          account_id: ${{ secrets.AWS_ACCOUNT_ID }}
          region: ${{ secrets.AWS_REGION }}
          repo: ${{ secrets.ECR_REPOSITORY }}
          dockerfile: ./wd-backend/Dockerfile
          path: ./wd-backend
          tags: latest

      - name: Set up SSH 🔐
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            mkdir -p ~/.ssh
            echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa  # SSH private key stored in GitHub Secrets
            chmod 600 ~/.ssh/id_rsa
            # Add the EC2 host to known hosts
            ssh-keyscan -H ${{ secrets.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts

      - name: Set up Docker on EC2 (If needed) 🐋🔧
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
              if ! command -v docker &> /dev/null
              then
                sudo yum update -y
                sudo amazon-linux-extras install docker
                sudo service docker start
                sudo usermod -aG docker ec2-user
              fi
            EOF

      - name: Stop existing Docker containers 🛑🐳
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
              # Stop and remove any existing containers
              docker stop $(docker ps -q) || true
            
              # Remove all stopped containers
              docker rm $(docker ps -a -q) || true
            EOF

      - name: Deploy to EC2 🌐🚀
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # Install Docker if it is not already installed
            ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
              # Login to ECR and pull the latest Docker image
              aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
            
              # Pull the latest Docker image
              docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest
            
              # Run the Docker image
              docker run -d -p 8080:8080 ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest
            EOF